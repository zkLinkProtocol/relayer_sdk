/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IL1ERC20Bridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL1ERC20Bridge__factory>;
    getContractFactory(
      name: "IL1StandardBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL1StandardBridge__factory>;
    getContractFactory(
      name: "ICrossDomainMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICrossDomainMessenger__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "IERC1822ProxiableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822ProxiableUpgradeable__factory>;
    getContractFactory(
      name: "IERC1967Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1967Upgradeable__factory>;
    getContractFactory(
      name: "IBeaconUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeaconUpgradeable__factory>;
    getContractFactory(
      name: "ERC1967UpgradeUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967UpgradeUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSUpgradeable__factory>;
    getContractFactory(
      name: "ReentrancyGuardUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable__factory>;
    getContractFactory(
      name: "IERC20PermitUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20PermitUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "ICrossDomainMessengerUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICrossDomainMessengerUpgradeable__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: "IERC1271",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1271__factory>;
    getContractFactory(
      name: "IERC1967",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1967__factory>;
    getContractFactory(
      name: "BeaconProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BeaconProxy__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "UpgradeableBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeableBeacon__factory>;
    getContractFactory(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Proxy__factory>;
    getContractFactory(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "ProxyAdmin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyAdmin__factory>;
    getContractFactory(
      name: "ITransparentUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITransparentUpgradeableProxy__factory>;
    getContractFactory(
      name: "TransparentUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransparentUpgradeableProxy__factory>;
    getContractFactory(
      name: "ERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155__factory>;
    getContractFactory(
      name: "IERC1155MetadataURI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155MetadataURI__factory>;
    getContractFactory(
      name: "IERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155__factory>;
    getContractFactory(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IL1ERC20Gateway",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL1ERC20Gateway__factory>;
    getContractFactory(
      name: "IL1ETHGateway",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL1ETHGateway__factory>;
    getContractFactory(
      name: "IL1GatewayRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL1GatewayRouter__factory>;
    getContractFactory(
      name: "IL1ScrollMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL1ScrollMessenger__factory>;
    getContractFactory(
      name: "IL2GasPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL2GasPriceOracle__factory>;
    getContractFactory(
      name: "IL2ERC20Gateway",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL2ERC20Gateway__factory>;
    getContractFactory(
      name: "IL2ETHGateway",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL2ETHGateway__factory>;
    getContractFactory(
      name: "IL2GatewayRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL2GatewayRouter__factory>;
    getContractFactory(
      name: "IScrollMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IScrollMessenger__factory>;
    getContractFactory(
      name: "ExpandedERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExpandedERC20__factory>;
    getContractFactory(
      name: "MultiCaller",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiCaller__factory>;
    getContractFactory(
      name: "MultiRole",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiRole__factory>;
    getContractFactory(
      name: "Testable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Testable__factory>;
    getContractFactory(
      name: "Timer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Timer__factory>;
    getContractFactory(
      name: "AddressWhitelistInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddressWhitelistInterface__factory>;
    getContractFactory(
      name: "ExpandedIERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExpandedIERC20__factory>;
    getContractFactory(
      name: "OptimisticOracleConstraints",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimisticOracleConstraints__factory>;
    getContractFactory(
      name: "OracleInterfaces",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleInterfaces__factory>;
    getContractFactory(
      name: "FinderInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FinderInterface__factory>;
    getContractFactory(
      name: "IdentifierWhitelistInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IdentifierWhitelistInterface__factory>;
    getContractFactory(
      name: "StoreInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StoreInterface__factory>;
    getContractFactory(
      name: "MerkleDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MerkleDistributor__factory>;
    getContractFactory(
      name: "MerkleDistributorInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MerkleDistributorInterface__factory>;
    getContractFactory(
      name: "OptimisticOracleInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimisticOracleInterface__factory>;
    getContractFactory(
      name: "SkinnyOptimisticOracleInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SkinnyOptimisticOracleInterface__factory>;
    getContractFactory(
      name: "AcrossConfigStore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AcrossConfigStore__factory>;
    getContractFactory(
      name: "Arbitrum_SpokePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Arbitrum_SpokePool__factory>;
    getContractFactory(
      name: "StandardBridgeLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StandardBridgeLike__factory>;
    getContractFactory(
      name: "Base_SpokePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Base_SpokePool__factory>;
    getContractFactory(
      name: "Blast_SpokePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Blast_SpokePool__factory>;
    getContractFactory(
      name: "IBlast",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBlast__factory>;
    getContractFactory(
      name: "IERC20Rebasing",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Rebasing__factory>;
    getContractFactory(
      name: "Boba_SpokePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Boba_SpokePool__factory>;
    getContractFactory(
      name: "BondToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BondToken__factory>;
    getContractFactory(
      name: "ExtendedHubPoolInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExtendedHubPoolInterface__factory>;
    getContractFactory(
      name: "Arbitrum_Adapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Arbitrum_Adapter__factory>;
    getContractFactory(
      name: "ArbitrumL1ERC20GatewayLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbitrumL1ERC20GatewayLike__factory>;
    getContractFactory(
      name: "ArbitrumL1InboxLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbitrumL1InboxLike__factory>;
    getContractFactory(
      name: "Arbitrum_RescueAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Arbitrum_RescueAdapter__factory>;
    getContractFactory(
      name: "Arbitrum_SendTokensAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Arbitrum_SendTokensAdapter__factory>;
    getContractFactory(
      name: "Base_Adapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Base_Adapter__factory>;
    getContractFactory(
      name: "Blast_Adapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Blast_Adapter__factory>;
    getContractFactory(
      name: "IL1ERC20Bridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL1ERC20Bridge__factory>;
    getContractFactory(
      name: "Boba_Adapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Boba_Adapter__factory>;
    getContractFactory(
      name: "CrossDomainEnabled",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrossDomainEnabled__factory>;
    getContractFactory(
      name: "Ethereum_Adapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ethereum_Adapter__factory>;
    getContractFactory(
      name: "Ethereum_RescueAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ethereum_RescueAdapter__factory>;
    getContractFactory(
      name: "AdapterInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AdapterInterface__factory>;
    getContractFactory(
      name: "Linea_Adapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Linea_Adapter__factory>;
    getContractFactory(
      name: "Lisk_Adapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Lisk_Adapter__factory>;
    getContractFactory(
      name: "Mock_Adapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Mock_Adapter__factory>;
    getContractFactory(
      name: "Mock_Bridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Mock_Bridge__factory>;
    getContractFactory(
      name: "Mode_Adapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Mode_Adapter__factory>;
    getContractFactory(
      name: "Optimism_Adapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Optimism_Adapter__factory>;
    getContractFactory(
      name: "SynthetixBridgeToOptimism",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SynthetixBridgeToOptimism__factory>;
    getContractFactory(
      name: "DepositManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DepositManager__factory>;
    getContractFactory(
      name: "IFxStateSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFxStateSender__factory>;
    getContractFactory(
      name: "IRootChainManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRootChainManager__factory>;
    getContractFactory(
      name: "Polygon_Adapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Polygon_Adapter__factory>;
    getContractFactory(
      name: "PolygonZkEVM_Adapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PolygonZkEVM_Adapter__factory>;
    getContractFactory(
      name: "Scroll_Adapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Scroll_Adapter__factory>;
    getContractFactory(
      name: "Succinct_Adapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Succinct_Adapter__factory>;
    getContractFactory(
      name: "LimitBypassProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LimitBypassProxy__factory>;
    getContractFactory(
      name: "ZkBridgeLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZkBridgeLike__factory>;
    getContractFactory(
      name: "ZkSync_Adapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZkSync_Adapter__factory>;
    getContractFactory(
      name: "ZkSyncInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZkSyncInterface__factory>;
    getContractFactory(
      name: "MintableERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintableERC1155__factory>;
    getContractFactory(
      name: "ISettlementContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISettlementContract__factory>;
    getContractFactory(
      name: "ERC7683OrderDepositor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC7683OrderDepositor__factory>;
    getContractFactory(
      name: "ERC7683OrderDepositorExternal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC7683OrderDepositorExternal__factory>;
    getContractFactory(
      name: "Ethereum_SpokePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ethereum_SpokePool__factory>;
    getContractFactory(
      name: "ITokenMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenMessenger__factory>;
    getContractFactory(
      name: "ITokenMinter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenMinter__factory>;
    getContractFactory(
      name: "IPermit2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPermit2__factory>;
    getContractFactory(
      name: "IPolygonZkEVMBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPolygonZkEVMBridge__factory>;
    getContractFactory(
      name: "IMessageService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageService__factory>;
    getContractFactory(
      name: "ITokenBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenBridge__factory>;
    getContractFactory(
      name: "IUSDCBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUSDCBridge__factory>;
    getContractFactory(
      name: "ITelepathyBroadcaster",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITelepathyBroadcaster__factory>;
    getContractFactory(
      name: "ITelepathyHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITelepathyHandler__factory>;
    getContractFactory(
      name: "WETH9Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH9Interface__factory>;
    getContractFactory(
      name: "WETH9",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH9__factory>;
    getContractFactory(
      name: "MulticallHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MulticallHandler__factory>;
    getContractFactory(
      name: "HubPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HubPool__factory>;
    getContractFactory(
      name: "HubPoolInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HubPoolInterface__factory>;
    getContractFactory(
      name: "LpTokenFactoryInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LpTokenFactoryInterface__factory>;
    getContractFactory(
      name: "SpokePoolInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SpokePoolInterface__factory>;
    getContractFactory(
      name: "AcrossMessageHandler",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AcrossMessageHandler__factory>;
    getContractFactory(
      name: "V3SpokePoolInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.V3SpokePoolInterface__factory>;
    getContractFactory(
      name: "CircleCCTPAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CircleCCTPAdapter__factory>;
    getContractFactory(
      name: "CircleDomainIds",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CircleDomainIds__factory>;
    getContractFactory(
      name: "Linea_SpokePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Linea_SpokePool__factory>;
    getContractFactory(
      name: "Lisk_SpokePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Lisk_SpokePool__factory>;
    getContractFactory(
      name: "Lockable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Lockable__factory>;
    getContractFactory(
      name: "LpTokenFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LpTokenFactory__factory>;
    getContractFactory(
      name: "AcrossMerkleDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AcrossMerkleDistributor__factory>;
    getContractFactory(
      name: "Mode_SpokePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Mode_SpokePool__factory>;
    getContractFactory(
      name: "Optimism_SpokePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Optimism_SpokePool__factory>;
    getContractFactory(
      name: "SynthetixBridgeToBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SynthetixBridgeToBase__factory>;
    getContractFactory(
      name: "IL2ERC20Bridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL2ERC20Bridge__factory>;
    getContractFactory(
      name: "Ovm_SpokePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ovm_SpokePool__factory>;
    getContractFactory(
      name: "PermissionSplitterProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PermissionSplitterProxy__factory>;
    getContractFactory(
      name: "Permit2Depositor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Permit2Depositor__factory>;
    getContractFactory(
      name: "Permit2OrderLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Permit2OrderLib__factory>;
    getContractFactory(
      name: "IFxMessageProcessor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFxMessageProcessor__factory>;
    getContractFactory(
      name: "Polygon_SpokePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Polygon_SpokePool__factory>;
    getContractFactory(
      name: "MaticToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MaticToken__factory>;
    getContractFactory(
      name: "PolygonERC20Predicate",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PolygonERC20Predicate__factory>;
    getContractFactory(
      name: "PolygonIERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PolygonIERC20Upgradeable__factory>;
    getContractFactory(
      name: "PolygonRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PolygonRegistry__factory>;
    getContractFactory(
      name: "PolygonTokenBridger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PolygonTokenBridger__factory>;
    getContractFactory(
      name: "IBridgeMessageReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridgeMessageReceiver__factory>;
    getContractFactory(
      name: "PolygonZkEVM_SpokePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PolygonZkEVM_SpokePool__factory>;
    getContractFactory(
      name: "Scroll_SpokePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Scroll_SpokePool__factory>;
    getContractFactory(
      name: "SpokePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SpokePool__factory>;
    getContractFactory(
      name: "SpokePoolVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SpokePoolVerifier__factory>;
    getContractFactory(
      name: "Succinct_SpokePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Succinct_SpokePool__factory>;
    getContractFactory(
      name: "SwapAndBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SwapAndBridge__factory>;
    getContractFactory(
      name: "SwapAndBridgeBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SwapAndBridgeBase__factory>;
    getContractFactory(
      name: "UniversalSwapAndBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniversalSwapAndBridge__factory>;
    getContractFactory(
      name: "AcrossMessageHandlerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AcrossMessageHandlerMock__factory>;
    getContractFactory(
      name: "ArbitrumMockErc20GatewayRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbitrumMockErc20GatewayRouter__factory>;
    getContractFactory(
      name: "MerkleLibTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MerkleLibTest__factory>;
    getContractFactory(
      name: "MockBedrockL2StandardBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockBedrockL2StandardBridge__factory>;
    getContractFactory(
      name: "MockCaller",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockCaller__factory>;
    getContractFactory(
      name: "MockERC1271",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC1271__factory>;
    getContractFactory(
      name: "MockHubPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockHubPool__factory>;
    getContractFactory(
      name: "MockOptimism_SpokePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockOptimism_SpokePool__factory>;
    getContractFactory(
      name: "MockSpokePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockSpokePool__factory>;
    getContractFactory(
      name: "MockSpokePoolV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockSpokePoolV2__factory>;
    getContractFactory(
      name: "PolygonERC20Test",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PolygonERC20Test__factory>;
    getContractFactory(
      name: "DepositManagerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DepositManagerMock__factory>;
    getContractFactory(
      name: "FxStateSenderMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FxStateSenderMock__factory>;
    getContractFactory(
      name: "PolygonERC20Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PolygonERC20Mock__factory>;
    getContractFactory(
      name: "PolygonERC20PredicateMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PolygonERC20PredicateMock__factory>;
    getContractFactory(
      name: "PolygonRegistryMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PolygonRegistryMock__factory>;
    getContractFactory(
      name: "RootChainManagerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RootChainManagerMock__factory>;
    getContractFactory(
      name: "TelepathyBroadcasterMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TelepathyBroadcasterMock__factory>;
    getContractFactory(
      name: "EIP712CrossChainUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712CrossChainUpgradeable__factory>;
    getContractFactory(
      name: "MultiCallerUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiCallerUpgradeable__factory>;
    getContractFactory(
      name: "IL2ETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL2ETH__factory>;
    getContractFactory(
      name: "ZkBridgeLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZkBridgeLike__factory>;
    getContractFactory(
      name: "ZkSync_SpokePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZkSync_SpokePool__factory>;

    getContractAt(
      name: "IL1ERC20Bridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IL1ERC20Bridge>;
    getContractAt(
      name: "IL1StandardBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IL1StandardBridge>;
    getContractAt(
      name: "ICrossDomainMessenger",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICrossDomainMessenger>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "IERC1822ProxiableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822ProxiableUpgradeable>;
    getContractAt(
      name: "IERC1967Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1967Upgradeable>;
    getContractAt(
      name: "IBeaconUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeaconUpgradeable>;
    getContractAt(
      name: "ERC1967UpgradeUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967UpgradeUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "UUPSUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSUpgradeable>;
    getContractAt(
      name: "ReentrancyGuardUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    getContractAt(
      name: "IERC20PermitUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20PermitUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "ICrossDomainMessengerUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICrossDomainMessengerUpgradeable>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1822Proxiable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: "IERC1271",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1271>;
    getContractAt(
      name: "IERC1967",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1967>;
    getContractAt(
      name: "BeaconProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BeaconProxy>;
    getContractAt(
      name: "IBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "UpgradeableBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeableBeacon>;
    getContractAt(
      name: "ERC1967Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Proxy>;
    getContractAt(
      name: "ERC1967Upgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Upgrade>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "ProxyAdmin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyAdmin>;
    getContractAt(
      name: "ITransparentUpgradeableProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITransparentUpgradeableProxy>;
    getContractAt(
      name: "TransparentUpgradeableProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransparentUpgradeableProxy>;
    getContractAt(
      name: "ERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155>;
    getContractAt(
      name: "IERC1155MetadataURI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155MetadataURI>;
    getContractAt(
      name: "IERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155>;
    getContractAt(
      name: "IERC1155Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Receiver>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IL1ERC20Gateway",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IL1ERC20Gateway>;
    getContractAt(
      name: "IL1ETHGateway",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IL1ETHGateway>;
    getContractAt(
      name: "IL1GatewayRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IL1GatewayRouter>;
    getContractAt(
      name: "IL1ScrollMessenger",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IL1ScrollMessenger>;
    getContractAt(
      name: "IL2GasPriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IL2GasPriceOracle>;
    getContractAt(
      name: "IL2ERC20Gateway",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IL2ERC20Gateway>;
    getContractAt(
      name: "IL2ETHGateway",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IL2ETHGateway>;
    getContractAt(
      name: "IL2GatewayRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IL2GatewayRouter>;
    getContractAt(
      name: "IScrollMessenger",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IScrollMessenger>;
    getContractAt(
      name: "ExpandedERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExpandedERC20>;
    getContractAt(
      name: "MultiCaller",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiCaller>;
    getContractAt(
      name: "MultiRole",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiRole>;
    getContractAt(
      name: "Testable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Testable>;
    getContractAt(
      name: "Timer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Timer>;
    getContractAt(
      name: "AddressWhitelistInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AddressWhitelistInterface>;
    getContractAt(
      name: "ExpandedIERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExpandedIERC20>;
    getContractAt(
      name: "OptimisticOracleConstraints",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimisticOracleConstraints>;
    getContractAt(
      name: "OracleInterfaces",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleInterfaces>;
    getContractAt(
      name: "FinderInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FinderInterface>;
    getContractAt(
      name: "IdentifierWhitelistInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IdentifierWhitelistInterface>;
    getContractAt(
      name: "StoreInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StoreInterface>;
    getContractAt(
      name: "MerkleDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MerkleDistributor>;
    getContractAt(
      name: "MerkleDistributorInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MerkleDistributorInterface>;
    getContractAt(
      name: "OptimisticOracleInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimisticOracleInterface>;
    getContractAt(
      name: "SkinnyOptimisticOracleInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SkinnyOptimisticOracleInterface>;
    getContractAt(
      name: "AcrossConfigStore",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AcrossConfigStore>;
    getContractAt(
      name: "Arbitrum_SpokePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Arbitrum_SpokePool>;
    getContractAt(
      name: "StandardBridgeLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StandardBridgeLike>;
    getContractAt(
      name: "Base_SpokePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Base_SpokePool>;
    getContractAt(
      name: "Blast_SpokePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Blast_SpokePool>;
    getContractAt(
      name: "IBlast",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBlast>;
    getContractAt(
      name: "IERC20Rebasing",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Rebasing>;
    getContractAt(
      name: "Boba_SpokePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Boba_SpokePool>;
    getContractAt(
      name: "BondToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BondToken>;
    getContractAt(
      name: "ExtendedHubPoolInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExtendedHubPoolInterface>;
    getContractAt(
      name: "Arbitrum_Adapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Arbitrum_Adapter>;
    getContractAt(
      name: "ArbitrumL1ERC20GatewayLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbitrumL1ERC20GatewayLike>;
    getContractAt(
      name: "ArbitrumL1InboxLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbitrumL1InboxLike>;
    getContractAt(
      name: "Arbitrum_RescueAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Arbitrum_RescueAdapter>;
    getContractAt(
      name: "Arbitrum_SendTokensAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Arbitrum_SendTokensAdapter>;
    getContractAt(
      name: "Base_Adapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Base_Adapter>;
    getContractAt(
      name: "Blast_Adapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Blast_Adapter>;
    getContractAt(
      name: "IL1ERC20Bridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IL1ERC20Bridge>;
    getContractAt(
      name: "Boba_Adapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Boba_Adapter>;
    getContractAt(
      name: "CrossDomainEnabled",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CrossDomainEnabled>;
    getContractAt(
      name: "Ethereum_Adapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ethereum_Adapter>;
    getContractAt(
      name: "Ethereum_RescueAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ethereum_RescueAdapter>;
    getContractAt(
      name: "AdapterInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AdapterInterface>;
    getContractAt(
      name: "Linea_Adapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Linea_Adapter>;
    getContractAt(
      name: "Lisk_Adapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Lisk_Adapter>;
    getContractAt(
      name: "Mock_Adapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Mock_Adapter>;
    getContractAt(
      name: "Mock_Bridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Mock_Bridge>;
    getContractAt(
      name: "Mode_Adapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Mode_Adapter>;
    getContractAt(
      name: "Optimism_Adapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Optimism_Adapter>;
    getContractAt(
      name: "SynthetixBridgeToOptimism",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SynthetixBridgeToOptimism>;
    getContractAt(
      name: "DepositManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DepositManager>;
    getContractAt(
      name: "IFxStateSender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFxStateSender>;
    getContractAt(
      name: "IRootChainManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRootChainManager>;
    getContractAt(
      name: "Polygon_Adapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Polygon_Adapter>;
    getContractAt(
      name: "PolygonZkEVM_Adapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PolygonZkEVM_Adapter>;
    getContractAt(
      name: "Scroll_Adapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Scroll_Adapter>;
    getContractAt(
      name: "Succinct_Adapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Succinct_Adapter>;
    getContractAt(
      name: "LimitBypassProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LimitBypassProxy>;
    getContractAt(
      name: "ZkBridgeLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZkBridgeLike>;
    getContractAt(
      name: "ZkSync_Adapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZkSync_Adapter>;
    getContractAt(
      name: "ZkSyncInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZkSyncInterface>;
    getContractAt(
      name: "MintableERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MintableERC1155>;
    getContractAt(
      name: "ISettlementContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISettlementContract>;
    getContractAt(
      name: "ERC7683OrderDepositor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC7683OrderDepositor>;
    getContractAt(
      name: "ERC7683OrderDepositorExternal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC7683OrderDepositorExternal>;
    getContractAt(
      name: "Ethereum_SpokePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ethereum_SpokePool>;
    getContractAt(
      name: "ITokenMessenger",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenMessenger>;
    getContractAt(
      name: "ITokenMinter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenMinter>;
    getContractAt(
      name: "IPermit2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPermit2>;
    getContractAt(
      name: "IPolygonZkEVMBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPolygonZkEVMBridge>;
    getContractAt(
      name: "IMessageService",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageService>;
    getContractAt(
      name: "ITokenBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenBridge>;
    getContractAt(
      name: "IUSDCBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUSDCBridge>;
    getContractAt(
      name: "ITelepathyBroadcaster",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITelepathyBroadcaster>;
    getContractAt(
      name: "ITelepathyHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITelepathyHandler>;
    getContractAt(
      name: "WETH9Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WETH9Interface>;
    getContractAt(
      name: "WETH9",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WETH9>;
    getContractAt(
      name: "MulticallHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MulticallHandler>;
    getContractAt(
      name: "HubPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HubPool>;
    getContractAt(
      name: "HubPoolInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HubPoolInterface>;
    getContractAt(
      name: "LpTokenFactoryInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LpTokenFactoryInterface>;
    getContractAt(
      name: "SpokePoolInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SpokePoolInterface>;
    getContractAt(
      name: "AcrossMessageHandler",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AcrossMessageHandler>;
    getContractAt(
      name: "V3SpokePoolInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.V3SpokePoolInterface>;
    getContractAt(
      name: "CircleCCTPAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CircleCCTPAdapter>;
    getContractAt(
      name: "CircleDomainIds",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CircleDomainIds>;
    getContractAt(
      name: "Linea_SpokePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Linea_SpokePool>;
    getContractAt(
      name: "Lisk_SpokePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Lisk_SpokePool>;
    getContractAt(
      name: "Lockable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Lockable>;
    getContractAt(
      name: "LpTokenFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LpTokenFactory>;
    getContractAt(
      name: "AcrossMerkleDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AcrossMerkleDistributor>;
    getContractAt(
      name: "Mode_SpokePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Mode_SpokePool>;
    getContractAt(
      name: "Optimism_SpokePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Optimism_SpokePool>;
    getContractAt(
      name: "SynthetixBridgeToBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SynthetixBridgeToBase>;
    getContractAt(
      name: "IL2ERC20Bridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IL2ERC20Bridge>;
    getContractAt(
      name: "Ovm_SpokePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ovm_SpokePool>;
    getContractAt(
      name: "PermissionSplitterProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PermissionSplitterProxy>;
    getContractAt(
      name: "Permit2Depositor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Permit2Depositor>;
    getContractAt(
      name: "Permit2OrderLib",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Permit2OrderLib>;
    getContractAt(
      name: "IFxMessageProcessor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFxMessageProcessor>;
    getContractAt(
      name: "Polygon_SpokePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Polygon_SpokePool>;
    getContractAt(
      name: "MaticToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MaticToken>;
    getContractAt(
      name: "PolygonERC20Predicate",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PolygonERC20Predicate>;
    getContractAt(
      name: "PolygonIERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PolygonIERC20Upgradeable>;
    getContractAt(
      name: "PolygonRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PolygonRegistry>;
    getContractAt(
      name: "PolygonTokenBridger",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PolygonTokenBridger>;
    getContractAt(
      name: "IBridgeMessageReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBridgeMessageReceiver>;
    getContractAt(
      name: "PolygonZkEVM_SpokePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PolygonZkEVM_SpokePool>;
    getContractAt(
      name: "Scroll_SpokePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Scroll_SpokePool>;
    getContractAt(
      name: "SpokePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SpokePool>;
    getContractAt(
      name: "SpokePoolVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SpokePoolVerifier>;
    getContractAt(
      name: "Succinct_SpokePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Succinct_SpokePool>;
    getContractAt(
      name: "SwapAndBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SwapAndBridge>;
    getContractAt(
      name: "SwapAndBridgeBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SwapAndBridgeBase>;
    getContractAt(
      name: "UniversalSwapAndBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniversalSwapAndBridge>;
    getContractAt(
      name: "AcrossMessageHandlerMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AcrossMessageHandlerMock>;
    getContractAt(
      name: "ArbitrumMockErc20GatewayRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbitrumMockErc20GatewayRouter>;
    getContractAt(
      name: "MerkleLibTest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MerkleLibTest>;
    getContractAt(
      name: "MockBedrockL2StandardBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockBedrockL2StandardBridge>;
    getContractAt(
      name: "MockCaller",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockCaller>;
    getContractAt(
      name: "MockERC1271",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockERC1271>;
    getContractAt(
      name: "MockHubPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockHubPool>;
    getContractAt(
      name: "MockOptimism_SpokePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockOptimism_SpokePool>;
    getContractAt(
      name: "MockSpokePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockSpokePool>;
    getContractAt(
      name: "MockSpokePoolV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockSpokePoolV2>;
    getContractAt(
      name: "PolygonERC20Test",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PolygonERC20Test>;
    getContractAt(
      name: "DepositManagerMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DepositManagerMock>;
    getContractAt(
      name: "FxStateSenderMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FxStateSenderMock>;
    getContractAt(
      name: "PolygonERC20Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PolygonERC20Mock>;
    getContractAt(
      name: "PolygonERC20PredicateMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PolygonERC20PredicateMock>;
    getContractAt(
      name: "PolygonRegistryMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PolygonRegistryMock>;
    getContractAt(
      name: "RootChainManagerMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RootChainManagerMock>;
    getContractAt(
      name: "TelepathyBroadcasterMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TelepathyBroadcasterMock>;
    getContractAt(
      name: "EIP712CrossChainUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712CrossChainUpgradeable>;
    getContractAt(
      name: "MultiCallerUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiCallerUpgradeable>;
    getContractAt(
      name: "IL2ETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IL2ETH>;
    getContractAt(
      name: "ZkBridgeLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZkBridgeLike>;
    getContractAt(
      name: "ZkSync_SpokePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZkSync_SpokePool>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
