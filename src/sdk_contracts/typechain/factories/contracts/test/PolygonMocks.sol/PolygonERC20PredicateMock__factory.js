"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PolygonERC20PredicateMock__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [
            {
                internalType: "bytes",
                name: "data",
                type: "bytes",
            },
        ],
        name: "startExitWithBurntTokens",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
];
const _bytecode = "0x608080604052346100155760b7908161001a8239f35b5f80fdfe6004361015600b575f80fd5b5f3560e01c637c5264b414601d575f80fd5b34607d5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112607d5760043567ffffffffffffffff808211607d5736602383011215607d578160040135908111607d5736910160240111607d57005b5f80fdfea2646970667358221220af72d81ef10fac5db1251a05ca744f0b374e799664d43f54fcbaffb2a534abd864736f6c63430008170033";
const isSuperArgs = (xs) => xs.length > 1;
class PolygonERC20PredicateMock__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.PolygonERC20PredicateMock__factory = PolygonERC20PredicateMock__factory;
PolygonERC20PredicateMock__factory.bytecode = _bytecode;
PolygonERC20PredicateMock__factory.abi = _abi;
