"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ISettlementContract__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "address",
                        name: "settlementContract",
                        type: "address",
                    },
                    {
                        internalType: "address",
                        name: "swapper",
                        type: "address",
                    },
                    {
                        internalType: "uint256",
                        name: "nonce",
                        type: "uint256",
                    },
                    {
                        internalType: "uint32",
                        name: "originChainId",
                        type: "uint32",
                    },
                    {
                        internalType: "uint32",
                        name: "initiateDeadline",
                        type: "uint32",
                    },
                    {
                        internalType: "uint32",
                        name: "fillDeadline",
                        type: "uint32",
                    },
                    {
                        internalType: "bytes",
                        name: "orderData",
                        type: "bytes",
                    },
                ],
                internalType: "struct CrossChainOrder",
                name: "order",
                type: "tuple",
            },
            {
                internalType: "bytes",
                name: "signature",
                type: "bytes",
            },
            {
                internalType: "bytes",
                name: "fillerData",
                type: "bytes",
            },
        ],
        name: "initiate",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "address",
                        name: "settlementContract",
                        type: "address",
                    },
                    {
                        internalType: "address",
                        name: "swapper",
                        type: "address",
                    },
                    {
                        internalType: "uint256",
                        name: "nonce",
                        type: "uint256",
                    },
                    {
                        internalType: "uint32",
                        name: "originChainId",
                        type: "uint32",
                    },
                    {
                        internalType: "uint32",
                        name: "initiateDeadline",
                        type: "uint32",
                    },
                    {
                        internalType: "uint32",
                        name: "fillDeadline",
                        type: "uint32",
                    },
                    {
                        internalType: "bytes",
                        name: "orderData",
                        type: "bytes",
                    },
                ],
                internalType: "struct CrossChainOrder",
                name: "order",
                type: "tuple",
            },
            {
                internalType: "bytes",
                name: "fillerData",
                type: "bytes",
            },
        ],
        name: "resolve",
        outputs: [
            {
                components: [
                    {
                        internalType: "address",
                        name: "settlementContract",
                        type: "address",
                    },
                    {
                        internalType: "address",
                        name: "swapper",
                        type: "address",
                    },
                    {
                        internalType: "uint256",
                        name: "nonce",
                        type: "uint256",
                    },
                    {
                        internalType: "uint32",
                        name: "originChainId",
                        type: "uint32",
                    },
                    {
                        internalType: "uint32",
                        name: "initiateDeadline",
                        type: "uint32",
                    },
                    {
                        internalType: "uint32",
                        name: "fillDeadline",
                        type: "uint32",
                    },
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "token",
                                type: "address",
                            },
                            {
                                internalType: "uint256",
                                name: "amount",
                                type: "uint256",
                            },
                        ],
                        internalType: "struct Input[]",
                        name: "swapperInputs",
                        type: "tuple[]",
                    },
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "token",
                                type: "address",
                            },
                            {
                                internalType: "uint256",
                                name: "amount",
                                type: "uint256",
                            },
                            {
                                internalType: "address",
                                name: "recipient",
                                type: "address",
                            },
                            {
                                internalType: "uint32",
                                name: "chainId",
                                type: "uint32",
                            },
                        ],
                        internalType: "struct Output[]",
                        name: "swapperOutputs",
                        type: "tuple[]",
                    },
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "token",
                                type: "address",
                            },
                            {
                                internalType: "uint256",
                                name: "amount",
                                type: "uint256",
                            },
                            {
                                internalType: "address",
                                name: "recipient",
                                type: "address",
                            },
                            {
                                internalType: "uint32",
                                name: "chainId",
                                type: "uint32",
                            },
                        ],
                        internalType: "struct Output[]",
                        name: "fillerOutputs",
                        type: "tuple[]",
                    },
                ],
                internalType: "struct ResolvedCrossChainOrder",
                name: "",
                type: "tuple",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
class ISettlementContract__factory {
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.ISettlementContract__factory = ISettlementContract__factory;
ISettlementContract__factory.abi = _abi;
