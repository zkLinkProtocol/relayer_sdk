"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwapAndBridgeBase__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [],
        name: "InvalidFunctionSelector",
        type: "error",
    },
    {
        inputs: [],
        name: "LeftoverSrcTokens",
        type: "error",
    },
    {
        inputs: [],
        name: "MinimumExpectedInputAmount",
        type: "error",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "address",
                name: "exchange",
                type: "address",
            },
            {
                indexed: true,
                internalType: "address",
                name: "swapToken",
                type: "address",
            },
            {
                indexed: true,
                internalType: "address",
                name: "acrossInputToken",
                type: "address",
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "swapTokenAmount",
                type: "uint256",
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "acrossInputAmount",
                type: "uint256",
            },
            {
                indexed: true,
                internalType: "address",
                name: "acrossOutputToken",
                type: "address",
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "acrossOutputAmount",
                type: "uint256",
            },
        ],
        name: "SwapBeforeBridge",
        type: "event",
    },
    {
        inputs: [],
        name: "EXCHANGE",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "SPOKE_POOL",
        outputs: [
            {
                internalType: "contract V3SpokePoolInterface",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes4",
                name: "",
                type: "bytes4",
            },
        ],
        name: "allowedSelectors",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes[]",
                name: "data",
                type: "bytes[]",
            },
        ],
        name: "multicall",
        outputs: [
            {
                internalType: "bytes[]",
                name: "results",
                type: "bytes[]",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
];
class SwapAndBridgeBase__factory {
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.SwapAndBridgeBase__factory = SwapAndBridgeBase__factory;
SwapAndBridgeBase__factory.abi = _abi;
